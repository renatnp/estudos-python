1. Usando "if" com dicionários:
   - Pode-se acessar valores de chaves de um dicionário e aplicar condições sobre eles.
Ex.:
   carro = {"marca": "Toyota", "modelo": "Corolla", "ano": 2020}
   if carro["ano"] >= 2020:
       print("Carro novo.")
   else:
       print("Carro mais antigo.")

2. Verificando se uma chave existe:
   - Pode-se usar `in` e "not in" para verificar a existência de uma chave.
Ex.:
   if "marca" in carro:
       print("A chave 'marca' está presente!")
   if "cor" not in carro:
       print("A chave 'cor' ainda não foi definida.")

3. Condições compostas com dados de dicionário:
   - É possível aplicar "and"/"or" para múltiplas verificações.
Ex.:
   aluno = {"nome": "João", "nota": 8.5, "frequência": 92}
   if aluno["nota"] >= 7 and aluno["frequência"] >= 75:
       print("Aprovado!")
   else:
       print("Reprovado.")

4. Modificando dicionário com base em condição:
   - Podemos adicionar ou modificar chaves dependendo do resultado de um teste lógico.
Ex.:
   if aluno["nota"] >= 7:
       aluno["situação"] = "Aprovado"
   else:
       aluno["situação"] = "Reprovado"
   print(aluno)

5. Uso do ".get()" com valor padrão:
   - Evita erro ao acessar chaves que podem não existir.
   - Retorna `None` ou o valor padrão especificado.

   pessoa = {"nome": "Ana", "idade": 30}
   print(pessoa.get("cidade", "Não informada"))  # Retorna "Não informada"

6. Exemplo aplicado com ".get()" e condições:

   funcionario = {"nome": "Carlos", "cargo": "Gerente", "salario": 6000}
   if funcionario["salario"] > 5000:
       funcionario["status"] = "Alto salário"
   print(funcionario.get("bonus", "Não participa"))  # Retorna mensagem padrão
   print(funcionario.get("status", "Normal"))        # Retorna "Alto salário"